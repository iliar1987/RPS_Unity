// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcScores
#pragma kernel CalcNextFrame
#pragma kernel Randomize
#pragma kernel SetColor

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float> Scores;

RWTexture2D<float4> LastFrame;
RWTexture2D<float4> NextFrame;
RWTexture2D<float4> Target;

int width;
int height;

float fSetColorRadius = 0.1;
float fSetColorCoeff = 0.2;
float4 colSetColor = float4(1.0,1.0,1.0,1.0);
float2 vecSetColorCenterUV = float2(0,0);

RWStructuredBuffer<float> cbScores;

static const float2 k = float2(23.1406926327792690,2.6651441426902251);

float rnda( float seed, float2 uv ) { return frac(cos( fmod(seed,1024.0 * dot(uv,k) )) ); }

float fDiffusionPower,fDiffusionCoeff,fNormPower;

[numthreads(8,8,1)]
void CalcScores(uint3 id : SV_DispatchThreadID)
{
	int scoreInd = id.y * width + id.x;

	int2 neighborIndices[4];
	neighborIndices[0] = int2( (id.x == 0 ? width - 1 : id.x-1 ), id.y);
	neighborIndices[1] = int2( (id.x == width-1 ? 0 : id.x+1 ), id.y);
	neighborIndices[2] = int2( id.x, id.y == 0 ? height - 1 : id.y - 1);
	neighborIndices[3] = int2( id.x, id.y == height-1 ? 0 : id.y + 1);

	float scoreOut = 0.0f;
	float4 myPixel = LastFrame[id.xy];
	for ( int i=0; i <4; ++i)
	{
		float4 neighbor = LastFrame[neighborIndices[i].xy];
		scoreOut += myPixel.x * neighbor.y - neighbor.x*myPixel.y
			+ myPixel.y * neighbor.z - neighbor.y*myPixel.z
			+ myPixel.z * neighbor.x - neighbor.z*myPixel.x;
	}

	cbScores[scoreInd] = scoreOut;
}

[numthreads(8,8,1)]
void CalcNextFrame(uint3 id : SV_DispatchThreadID)
{
	int scoreInd = id.y * width + id.x;

	int2 neighborIndices[5];
	neighborIndices[0] = int2( (id.x == 0 ? width - 1 : id.x-1 ), id.y);
	neighborIndices[1] = int2( (id.x == width-1 ? 0 : id.x+1 ), id.y);
	neighborIndices[2] = int2( id.x, id.y == 0 ? height - 1 : id.y - 1);
	neighborIndices[3] = int2( id.x, id.y == height-1 ? 0 : id.y + 1);
	neighborIndices[4] = int2(id.x,id.y);

	float fHighestScore = cbScores[scoreInd];
	int chosenInd=4;
	for ( int i=0 ; i<4 ; ++i)
	{
		int nhScoreInd = neighborIndices[i].y * width + neighborIndices[i].x;
		float nhScore = cbScores[nhScoreInd];
		if ( nhScore > 1.01f * fHighestScore )
		{
			chosenInd = i;
			fHighestScore = nhScore;
		}
	}

	float4 myPixel = LastFrame[id.xy];
	float4 chosenPixel = LastFrame[neighborIndices[chosenInd].xy];
	float4 pixelResult = chosenPixel*fDiffusionCoeff + (1.0f-fDiffusionCoeff) * myPixel;
	pixelResult = pow(pixelResult,fDiffusionPower);
	float fSum=0.0f;
	for ( int j = 0; j<3 ; j++)
	{
		fSum += pow(pixelResult[j],fNormPower);
	}
	pixelResult.xyz /= pow(fSum,1.0f/fNormPower);
	NextFrame[id.xy] = pixelResult;
}

[numthreads(8,8,1)]
void Randomize(uint3 id : SV_DispatchThreadID)
{
	float2 uv = float2(id.x,id.y);
	//float2 uv = float2(3,3);
	float r = rnda(547345624.,uv);
	float g = rnda(235234235.,uv);
	float b = rnda(123456780.,uv);
	Result[id.xy] = clamp(float4(r,g,b,1.0),0,1);
	//Result[id.xy] = float4(1.0,1.0,1.0,1.0);
}

[numthreads(8,8,1)]
void SetColor(uint3 id : SV_DispatchThreadID)
{
	float2 uv = float2(id.xy/float2(width,height));
	float2 vecDist = uv - vecSetColorCenterUV;
	vecDist = abs(vecDist);
	if ( vecDist.x > 0.5f )
		vecDist.x = 1.0f - vecDist.x;
	if ( vecDist.y > 0.5f )
		vecDist.y = 1.0f - vecDist.y;

	float fDistance = length(vecDist);
	if ( fDistance > fSetColorRadius*4 )
		return;
	else
	{
		float4 pixel = Target[id.xy];
		pixel += colSetColor * fSetColorCoeff * exp(-fDistance*fDistance / fSetColorRadius / fSetColorRadius);
		pixel = clamp(pixel,0,1);
		Target[id.xy] = pixel;
	}
}

